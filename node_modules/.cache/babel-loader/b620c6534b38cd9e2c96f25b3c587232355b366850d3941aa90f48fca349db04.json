{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrut\\\\OneDrive\\\\Desktop\\\\dijkstra_algo\\\\Dijkstra-algo\\\\Dijkstra-s-algorithm-Visualizer-main\\\\Dijkstra-s-algorithm-Visualizer-main\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node.jsx\";\nimport { showPopUp } from \"./Tutorial/Tutorial.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathfindingVisualizer.css\";\n\n// Defining initial state of start and finish.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet row_max_length = 20;\nlet col_max_length = 40;\nlet START_NODE_ROW = 9;\nlet START_NODE_COL = 8;\nlet FINISH_NODE_ROW = 9;\nlet FINISH_NODE_COL = 31;\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    // onClick={() => this.resetGrid()}\n    // resetGrid() {\n    //   const newGrid = getInitialGrid();\n    //   START_NODE_ROW = 0;\n    //   START_NODE_COL = 0;\n    //   FINISH_NODE_ROW = row_max_length - 1;\n    //   FINISH_NODE_COL = col_max_length - 1;\n    //   document.getElementById(\"start_row\").value = START_NODE_ROW;\n    //   document.getElementById(\"start_col\").value = START_NODE_COL;\n    //   document.getElementById(\"end_row\").value = FINISH_NODE_ROW;\n    //   document.getElementById(\"end_col\").value = FINISH_NODE_COL;\n    //   for (let row = 0; row < row_max_length; row++) {\n    //     for (let col = 0; col < col_max_length; col++) {\n    //       if (row === START_NODE_ROW && col === START_NODE_COL) {\n    //         document.getElementById(`node-${row}-${col}`).className =\n    //           \"node node-start\";\n    //       } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n    //         document.getElementById(`node-${row}-${col}`).className =\n    //           \"node node-finish\";\n    //       } else {\n    //         document.getElementById(`node-${row}-${col}`).className = \"node\";\n    //       }\n    //     }\n    //   }\n    //   this.setState({ topMessage: \"Dijkstra Algorithm\" });\n    //   this.setState({ grid: newGrid });\n    // }\n    this.weightChangeHandler = event => {\n      this.setState({\n        weight: event.target.value\n      });\n    };\n    this.pointChangeHandler = () => {\n      if (this.notCorrect()) return; //To check if the provided value is suitable or not.\n\n      document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node\";\n      document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node\";\n      START_NODE_ROW = parseInt(document.getElementById(\"start_row\").value);\n      START_NODE_COL = parseInt(document.getElementById(\"start_col\").value);\n      FINISH_NODE_ROW = parseInt(document.getElementById(\"end_row\").value);\n      FINISH_NODE_COL = parseInt(document.getElementById(\"end_col\").value);\n      document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node node-start\";\n      document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node node-finish\";\n    };\n    this.notCorrect = () => {\n      if (isNaN(parseInt(document.getElementById(\"start_row\").value)) || isNaN(parseInt(document.getElementById(\"start_col\").value)) || isNaN(parseInt(document.getElementById(\"end_row\").value)) || isNaN(parseInt(document.getElementById(\"end_col\").value))) return true;\n      if (parseInt(document.getElementById(\"start_row\").value) > row_max_length || parseInt(document.getElementById(\"start_col\").value) > col_max_length) return true;\n      if (parseInt(document.getElementById(\"start_row\").value) < 0 || parseInt(document.getElementById(\"start_col\").value) < 0) return true;\n      if (parseInt(document.getElementById(\"end_row\").value) > row_max_length || parseInt(document.getElementById(\"end_col\").value) > col_max_length) return true;\n      if (parseInt(document.getElementById(\"end_row\").value) < 0 || parseInt(document.getElementById(\"end_col\").value) < 0) return true;\n      return false;\n    };\n    this.toggleWeight = () => {\n      const temp = this.state.changeWeight;\n      this.setState({\n        changeWeight: !temp\n      });\n    };\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      topMessage: \"Dijkstra Algorithm\",\n      weight: 1,\n      changeWeight: false,\n      distanceToBeTraveled: 0\n    };\n  }\n\n  // Creating grid\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  // On pressing the mouse down\n  handleMouseDown(row, col) {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    let newGrid = [];\n    if (this.state.changeWeight) {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col, this.state.weight);\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  // On entering the new node element.\n  handleMouseEnter(row, col) {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    if (!this.state.mouseIsPressed) return;\n    let newGrid = [];\n    if (this.state.changeWeight) {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col, this.state.weight);\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    }\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  // When we release the mouse\n  handleMouseUp() {\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n  visualizeDijkstra() {\n    this.setState({\n      topMessage: \"Creator : Gargi\"\n    });\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      // When we reach the last element in visitedNodesInOrder.\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.setState({\n            topMessage: \"Shortest Path\"\n          });\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      if (i === visitedNodesInOrder.length - 1) continue;\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (node.isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visitedWeight\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n        }\n      }, 10 * i);\n    }\n  }\n  animateShortestPath(nodesInShortestPathOrder) {\n    let timeTaken = 0;\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (nodesInShortestPathOrder[i].isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-path-weight\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-path\";\n        }\n      }, 50 * i);\n    }\n    timeTaken = nodesInShortestPathOrder[nodesInShortestPathOrder.length - 1].distance;\n    this.setState({\n      distanceToBeTraveled: timeTaken\n    });\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      topMessage,\n      distanceToBeTraveled\n    } = this.state;\n    let button_task = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"btn\",\n      onClick: () => this.visualizeDijkstra(),\n      children: \"Start Dijkstra Algorithm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this);\n    if (topMessage === \"Shortest Path\") {\n      button_task = /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"btn\",\n        href: \"#\",\n        onClick: () => window.location.reload(false),\n        children: [\"Reset \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this), \"Time : \", distanceToBeTraveled, /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \" [1 Block = 1 Time = 1 Weight]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this);\n    } else if (topMessage === \"Creator : Gargi\") {\n      button_task = /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"running\",\n        children: \"Running...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }, this);\n    }\n    let changeWeightText = \"False\";\n    if (this.state.changeWeight) changeWeightText = \"True\";\n    let textBox = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weightContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"quantity\",\n          children: \"Toggle or Set Weight \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"quantity\",\n          name: \"quantity\",\n          min: \"1\",\n          max: \"5\",\n          onChange: this.weightChangeHandler,\n          defaultValue: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.toggleWeight,\n          children: changeWeightText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"startPointContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"point\",\n          children: \"Start Point :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"start_row\",\n          min: \"0\",\n          max: row_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"start_col\",\n          min: \"0\",\n          max: col_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"endPointContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"point\",\n          children: \"End Point :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"end_row\",\n          min: \"0\",\n          max: row_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"point\",\n          id: \"end_col\",\n          min: \"0\",\n          max: col_max_length - 1,\n          onChange: this.pointChangeHandler,\n          defaultValue: \"31\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonContainer\",\n        children: button_task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this);\n    if (topMessage === \"Creator : Gargi\") {\n      textBox = null;\n    } else if (topMessage === \"Shortest Path\") {\n      textBox = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonContainer\",\n        style: {\n          width: \"30%\",\n          margin: \"0 auto\"\n        },\n        children: button_task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pathfindingVisualizer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"heading\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            onClick: showPopUp,\n            children: \"Search Visualizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: topMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), textBox, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Dijkstra's Algorithm is weighted and guarantees the shortest path!\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ref\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualGridContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridBox\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"grid\",\n            style: {\n              borderSpacing: \"0\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: grid.map((row, rowIndex) => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: row.map((node, nodeIndex) => {\n                    const {\n                      isStart,\n                      isFinish,\n                      isWall,\n                      isWeight\n                    } = node; //Extracting from the node\n                    return /*#__PURE__*/_jsxDEV(Node, {\n                      row: rowIndex,\n                      col: nodeIndex,\n                      isStart: isStart,\n                      isFinish: isFinish,\n                      isWall: isWall,\n                      isWeight: isWeight,\n                      mouseIsPressed: mouseIsPressed,\n                      onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                      onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                      onMouseUp: () => this.handleMouseUp()\n                    }, rowIndex + \"-\" + nodeIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < row_max_length; row++) {\n    const currentRow = [];\n    for (let col = 0; col < col_max_length; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isWeight: false,\n    previousNode: null,\n    weight: 0\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = [...grid];\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    // copying other properties of the node\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\nconst getNewGridWithWeightToggled = (grid, row, col, weight) => {\n  const newGrid = [...grid];\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    // copying other properties of the node\n    isWeight: !node.isWeight,\n    weight: parseInt(weight)\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","showPopUp","dijkstra","getNodesInShortestPathOrder","jsxDEV","_jsxDEV","row_max_length","col_max_length","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","props","weightChangeHandler","event","setState","weight","target","value","pointChangeHandler","notCorrect","document","getElementById","className","parseInt","isNaN","toggleWeight","temp","state","changeWeight","grid","mouseIsPressed","topMessage","distanceToBeTraveled","componentDidMount","getInitialGrid","handleMouseDown","row","col","newGrid","getNewGridWithWeightToggled","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","visualizeDijkstra","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","animateDijkstra","i","length","setTimeout","animateShortestPath","node","isWeight","timeTaken","distance","render","button_task","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","href","window","location","reload","changeWeightText","textBox","htmlFor","type","id","name","min","max","onChange","defaultValue","style","width","margin","borderSpacing","map","rowIndex","nodeIndex","isStart","isFinish","isWall","onMouseDown","onMouseEnter","onMouseUp","currentRow","push","createNode","Infinity","isVisited","previousNode","newNode"],"sources":["C:/Users/shrut/OneDrive/Desktop/dijkstra_algo/Dijkstra-algo/Dijkstra-s-algorithm-Visualizer-main/Dijkstra-s-algorithm-Visualizer-main/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Node from \"./Node/Node.jsx\";\r\nimport {showPopUp} from \"./Tutorial/Tutorial.jsx\";\r\n\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\n// Defining initial state of start and finish.\r\n\r\nlet row_max_length = 20;\r\nlet col_max_length = 40;\r\n\r\nlet START_NODE_ROW = 9;\r\nlet START_NODE_COL = 8;\r\nlet FINISH_NODE_ROW = 9;\r\nlet FINISH_NODE_COL = 31;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      topMessage: \"Dijkstra Algorithm\",\r\n      weight: 1,\r\n      changeWeight: false,\r\n      distanceToBeTraveled: 0,\r\n    };\r\n  }\r\n\r\n  // Creating grid\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  // On pressing the mouse down\r\n  handleMouseDown(row, col) {\r\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\r\n\r\n    let newGrid = [];\r\n\r\n    if (this.state.changeWeight) {\r\n      newGrid = getNewGridWithWeightToggled(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.weight\r\n      );\r\n    } else {\r\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    }\r\n\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  // On entering the new node element.\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    let newGrid = [];\r\n\r\n    if (this.state.changeWeight) {\r\n      newGrid = getNewGridWithWeightToggled(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.weight\r\n      );\r\n    } else {\r\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    }\r\n\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  // When we release the mouse\r\n  handleMouseUp() {\r\n    if (this.state.topMessage !== \"Dijkstra Algorithm\") return;\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    this.setState({ topMessage: \"Creator : Gargi\" });\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      // When we reach the last element in visitedNodesInOrder.\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ topMessage: \"Shortest Path\" });\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n\r\n      if (i === visitedNodesInOrder.length - 1) continue;\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (node.isWeight) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visitedWeight\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    let timeTaken = 0;\r\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (nodesInShortestPathOrder[i].isWeight) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-path-weight\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-path\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n\r\n    timeTaken =\r\n      nodesInShortestPathOrder[nodesInShortestPathOrder.length - 1].distance;\r\n    this.setState({ distanceToBeTraveled: timeTaken });\r\n  }\r\n\r\n  // onClick={() => this.resetGrid()}\r\n  // resetGrid() {\r\n\r\n  //   const newGrid = getInitialGrid();\r\n\r\n  //   START_NODE_ROW = 0;\r\n  //   START_NODE_COL = 0;\r\n  //   FINISH_NODE_ROW = row_max_length - 1;\r\n  //   FINISH_NODE_COL = col_max_length - 1;\r\n\r\n  //   document.getElementById(\"start_row\").value = START_NODE_ROW;\r\n  //   document.getElementById(\"start_col\").value = START_NODE_COL;\r\n  //   document.getElementById(\"end_row\").value = FINISH_NODE_ROW;\r\n  //   document.getElementById(\"end_col\").value = FINISH_NODE_COL;\r\n\r\n  //   for (let row = 0; row < row_max_length; row++) {\r\n  //     for (let col = 0; col < col_max_length; col++) {\r\n  //       if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n  //         document.getElementById(`node-${row}-${col}`).className =\r\n  //           \"node node-start\";\r\n  //       } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n  //         document.getElementById(`node-${row}-${col}`).className =\r\n  //           \"node node-finish\";\r\n  //       } else {\r\n  //         document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   this.setState({ topMessage: \"Dijkstra Algorithm\" });\r\n\r\n  //   this.setState({ grid: newGrid });\r\n  // }\r\n\r\n  weightChangeHandler = (event) => {\r\n    this.setState({ weight: event.target.value });\r\n  };\r\n\r\n  pointChangeHandler = () => {\r\n    if (this.notCorrect()) return; //To check if the provided value is suitable or not.\r\n\r\n    document.getElementById(\r\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n    ).className = \"node\";\r\n    document.getElementById(\r\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n    ).className = \"node\";\r\n\r\n    START_NODE_ROW = parseInt(document.getElementById(\"start_row\").value);\r\n    START_NODE_COL = parseInt(document.getElementById(\"start_col\").value);\r\n    FINISH_NODE_ROW = parseInt(document.getElementById(\"end_row\").value);\r\n    FINISH_NODE_COL = parseInt(document.getElementById(\"end_col\").value);\r\n\r\n    document.getElementById(\r\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n    ).className = \"node node-start\";\r\n    document.getElementById(\r\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n    ).className = \"node node-finish\";\r\n  };\r\n\r\n  notCorrect = () => {\r\n    if (\r\n      isNaN(parseInt(document.getElementById(\"start_row\").value)) ||\r\n      isNaN(parseInt(document.getElementById(\"start_col\").value)) ||\r\n      isNaN(parseInt(document.getElementById(\"end_row\").value)) ||\r\n      isNaN(parseInt(document.getElementById(\"end_col\").value))\r\n    )\r\n      return true;\r\n\r\n    if (\r\n      parseInt(document.getElementById(\"start_row\").value) > row_max_length ||\r\n      parseInt(document.getElementById(\"start_col\").value) > col_max_length\r\n    )\r\n      return true;\r\n    if (\r\n      parseInt(document.getElementById(\"start_row\").value) < 0 ||\r\n      parseInt(document.getElementById(\"start_col\").value) < 0\r\n    )\r\n      return true;\r\n\r\n    if (\r\n      parseInt(document.getElementById(\"end_row\").value) > row_max_length ||\r\n      parseInt(document.getElementById(\"end_col\").value) > col_max_length\r\n    )\r\n      return true;\r\n    if (\r\n      parseInt(document.getElementById(\"end_row\").value) < 0 ||\r\n      parseInt(document.getElementById(\"end_col\").value) < 0\r\n    )\r\n      return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  toggleWeight = () => {\r\n    const temp = this.state.changeWeight;\r\n    this.setState({ changeWeight: !temp });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      mouseIsPressed,\r\n      topMessage,\r\n      distanceToBeTraveled,\r\n    } = this.state;\r\n    let button_task = (\r\n      <p className=\"btn\" onClick={() => this.visualizeDijkstra()}>\r\n        Start Dijkstra Algorithm\r\n      </p>\r\n    );\r\n\r\n    if (topMessage === \"Shortest Path\") {\r\n      button_task = (\r\n        <h2\r\n          className=\"btn\"\r\n          href=\"#\"\r\n          onClick={() => window.location.reload(false)}\r\n        >\r\n          Reset <br />\r\n          Time : {distanceToBeTraveled}\r\n          <small> [1 Block = 1 Time = 1 Weight]</small>\r\n        </h2>\r\n      );\r\n    } else if (topMessage === \"Creator : Gargi\") {\r\n      button_task = <h3 className=\"running\">Running...</h3>;\r\n    }\r\n\r\n    let changeWeightText = \"False\";\r\n\r\n    if (this.state.changeWeight) changeWeightText = \"True\";\r\n\r\n    let textBox = (\r\n      <div className=\"textBox\">\r\n        <div className=\"weightContainer\">\r\n          <label htmlFor=\"quantity\">Toggle or Set Weight </label>\r\n\r\n          <input\r\n            type=\"number\"\r\n            id=\"quantity\"\r\n            name=\"quantity\"\r\n            min=\"1\"\r\n            max=\"5\"\r\n            onChange={this.weightChangeHandler}\r\n            defaultValue=\"1\"\r\n          />\r\n\r\n          <button onClick={this.toggleWeight}>{changeWeightText}</button>\r\n        </div>\r\n\r\n        <div className=\"startPointContainer\">\r\n          <label htmlFor=\"point\">Start Point :</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"point\"\r\n            id=\"start_row\"\r\n            min=\"0\"\r\n            max={row_max_length - 1}\r\n            onChange={this.pointChangeHandler}\r\n            defaultValue=\"9\"\r\n          ></input>\r\n          <input\r\n            type=\"number\"\r\n            name=\"point\"\r\n            id=\"start_col\"\r\n            min=\"0\"\r\n            max={col_max_length - 1}\r\n            onChange={this.pointChangeHandler}\r\n            defaultValue=\"8\"\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"endPointContainer\">\r\n          <label htmlFor=\"point\">End Point :</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"point\"\r\n            id=\"end_row\"\r\n            min=\"0\"\r\n            max={row_max_length - 1}\r\n            onChange={this.pointChangeHandler}\r\n            defaultValue=\"9\"\r\n          ></input>\r\n          <input\r\n            type=\"number\"\r\n            name=\"point\"\r\n            id=\"end_col\"\r\n            min=\"0\"\r\n            max={col_max_length - 1}\r\n            onChange={this.pointChangeHandler}\r\n            defaultValue=\"31\"\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"buttonContainer\">{button_task}</div>\r\n      </div>\r\n    );\r\n\r\n    if (topMessage === \"Creator : Gargi\") {\r\n      textBox = null;\r\n    } else if (topMessage === \"Shortest Path\") {\r\n      textBox = (\r\n        <div\r\n          className=\"buttonContainer\"\r\n          style={{ width: \"30%\", margin: \"0 auto\" }}\r\n        >\r\n          {button_task}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"pathfindingVisualizer\">\r\n        <div className=\"container\">\r\n          <div className=\"heading\">\r\n            <h2 onClick={showPopUp}>Search Visualizer</h2>\r\n            <h2>{topMessage}</h2>\r\n          </div>\r\n\r\n          {/* Show the header */}\r\n          {textBox}\r\n\r\n          <p>\r\n            Dijkstra's Algorithm is weighted and guarantees the shortest path!{\" \"}\r\n            <span className=\"ref\"></span>\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"visualGridContainer\">\r\n          <div className=\"gridBox\">\r\n            <table className=\"grid\" style={{ borderSpacing: \"0\" }}>\r\n              <tbody>\r\n                {grid.map((row, rowIndex) => {\r\n                  return (\r\n                    <tr key={rowIndex}>\r\n                      {row.map((node, nodeIndex) => {\r\n                        const { isStart, isFinish, isWall, isWeight } = node; //Extracting from the node\r\n                        return (\r\n                          <Node\r\n                            row={rowIndex}\r\n                            col={nodeIndex}\r\n                            key={rowIndex + \"-\" + nodeIndex}\r\n                            isStart={isStart}\r\n                            isFinish={isFinish}\r\n                            isWall={isWall}\r\n                            isWeight={isWeight}\r\n                            mouseIsPressed={mouseIsPressed}\r\n                            onMouseDown={(row, col) =>\r\n                              this.handleMouseDown(row, col)\r\n                            }\r\n                            onMouseEnter={(row, col) =>\r\n                              this.handleMouseEnter(row, col)\r\n                            }\r\n                            onMouseUp={() => this.handleMouseUp()}\r\n                          ></Node>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < row_max_length; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < col_max_length; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    isWeight: false,\r\n    previousNode: null,\r\n    weight: 0,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = [...grid];\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node, // copying other properties of the node\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWeightToggled = (grid, row, col, weight) => {\r\n  const newGrid = [...grid];\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node, // copying other properties of the node\r\n    isWeight: !node.isWeight,\r\n    weight: parseInt(weight),\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}